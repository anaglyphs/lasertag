// https://github.com/oculus-samples/Unity-DepthAPI/issues/16
#include "../Depth/DepthKit.hlsl"
#include "../Environment/Environment.hlsl"

#pragma kernel Scan
#pragma kernel Apply
#pragma kernel Clear
#pragma kernel Raycast

RWStructuredBuffer<int> _PerFrameScan; // should be 32bit signed int
RWTexture2D<float> _HeightMap; 

uint _TexSize;
uint _DepthSamples;

#define DEPTH_MIN 1
#define DEPTH_MAX 6.0

#define HEIGHT_MIN -3.0
#define HEIGHT_MAX 0.3

#define HEIGHT_INT_FACTOR 100.0
#define PER_FRAME_UNWRITTEN 0
#define HEIGHT_UNWRITTEN PER_FRAME_UNWRITTEN / HEIGHT_INT_FACTOR
#define EDGE_GRADE 0.01

uint toIndex(uint2 coord)
{
	return coord.y * _TexSize + coord.x;
}

bool IsInFrame(float3 world)
{
	float2 ndc = agDepthWorldToNDC(world).xy;
	return all(ndc.xy > float2(0, 0)) && all(ndc.xy < float2(1, 1));
}

float toFloatHeight(int height)
{
	return float(height) / HEIGHT_INT_FACTOR;
}

int toIntHeight(float height)
{
	return round(height * HEIGHT_INT_FACTOR);
}

[numthreads(64, 1, 1)]
void Scan(uint3 id : SV_DispatchThreadID)
{
	float2 depthUV = float2(id.xy) / _DepthSamples;
	
	float depth = agDepthSample(depthUV);
	
	float4 depthHCS = agDepthNDCtoHCS(float3(depthUV, depth));
	float4 depthWorld = agDepthHCStoWorldH(depthHCS);
	depthWorld /= depthWorld.w;
	
	float height = depthWorld.y;
	int intHeight = toIntHeight(depthWorld.y);
	
	intHeight += intHeight == PER_FRAME_UNWRITTEN;
	
	float2 uv = saturate(agEnvWorldToUV(depthWorld.xyz));
	uint2 mapCoord = uint2(uv * _TexSize);
	uint index = toIndex(mapCoord);
	
	// within valid height range 
	float3 eyePos = agDepthViewInv[0]._m03_m13_m23;
	float validHeightMin = eyePos.y + HEIGHT_MIN;
	float validHeightMax = eyePos.y + HEIGHT_MAX;
	bool validY = validHeightMin < height && height < validHeightMax;
	
	// within valid distance
	float dist = distance(depthWorld.xz, eyePos.xz);
	bool validDistance = DEPTH_MIN < dist && dist < DEPTH_MAX;
	
	// previous height is visible in view
	float heightLastFrame = _HeightMap[mapCoord];
	float3 posLastFrame = float3(depthWorld.x, heightLastFrame, depthWorld.z);
	bool previousHeightInView = IsInFrame(posLastFrame) || !heightLastFrame != HEIGHT_UNWRITTEN;
	
	// not an edge
	float edgeSampleOffset = 2.0 / _DepthSamples;
	
	float2 edgeSampleUVy = depthUV + float2(0, edgeSampleOffset);
	float edgeDepthY = agDepthSample(edgeSampleUVy) * 2 - 1;
	float edgeDiffY = abs(edgeDepthY - depthHCS.z); 
	
	float2 edgeSampleUVx = depthUV + float2(edgeSampleOffset, 0);
	float edgeDepthX = agDepthSample(edgeSampleUVx) * 2 - 1;
	float edgeDiffX = abs(edgeDepthX - depthHCS.z);
	
	bool isEdge = edgeDiffX + edgeDiffY > EDGE_GRADE;
	
	// validate
	bool valid = validY && validDistance && previousHeightInView && !isEdge;
	
	if (!valid)
		return;
	
	InterlockedMax(_PerFrameScan[index], intHeight);
}

[numthreads(8, 8, 1)]
void Apply(uint3 id : SV_DispatchThreadID)
{
	uint index = toIndex(id.xy);
	int intHeight = _PerFrameScan[index];
	
	if (intHeight == PER_FRAME_UNWRITTEN)
		return;
	
	_HeightMap[id.xy] = toFloatHeight(intHeight);
	_PerFrameScan[index] = PER_FRAME_UNWRITTEN;
}

[numthreads(8, 8, 1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
	_HeightMap[id.xy] = 0;
	uint index = toIndex(id.xy);
	_PerFrameScan[index] = PER_FRAME_UNWRITTEN;
}

float3 raycastOrigin;
float3 raycastStep;
RWStructuredBuffer<uint> hitIndex;
[numthreads(64, 1, 1)]
void Raycast(uint3 id : SV_DispatchThreadID)
{
	uint stepNumber = id.x;
	
	float3 worldPos = raycastOrigin + raycastStep * stepNumber;
	float envHeight = agEnvSample(agEnvWorldToUV(worldPos));
	if(worldPos.y < envHeight)
		InterlockedMin(hitIndex[0], stepNumber);
}